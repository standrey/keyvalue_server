// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REPLY_HOMEWORK_H_
#define FLATBUFFERS_GENERATED_REPLY_HOMEWORK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Homework {

struct Reply;
struct ReplyBuilder;

struct Reply FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReplyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_VALUE = 6
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE, 4) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct ReplyBuilder {
  typedef Reply Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(Reply::VT_CODE, code, 0);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Reply::VT_VALUE, value);
  }
  explicit ReplyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Reply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Reply>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Reply> CreateReply(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  ReplyBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_code(code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Reply> CreateReplyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return Homework::CreateReply(
      _fbb,
      code,
      value__);
}

inline const Homework::Reply *GetReply(const void *buf) {
  return ::flatbuffers::GetRoot<Homework::Reply>(buf);
}

inline const Homework::Reply *GetSizePrefixedReply(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Homework::Reply>(buf);
}

inline bool VerifyReplyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Homework::Reply>(nullptr);
}

inline bool VerifySizePrefixedReplyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Homework::Reply>(nullptr);
}

inline void FinishReplyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Homework::Reply> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReplyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Homework::Reply> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Homework

#endif  // FLATBUFFERS_GENERATED_REPLY_HOMEWORK_H_
